name: Release Grid Trading Plan Calculator

on:
  push:
    branches: [ main ]

env:
  APP_NAME: "Grid Trading Tool"

jobs:
  build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Create mock userconfig.ini
      run: |
        echo "[MoomooAPI]" > userconfig.ini
        echo "host = 127.0.0.1" >> userconfig.ini
        echo "port = 11111" >> userconfig.ini
        echo "trade_env = REAL" >> userconfig.ini
        echo "security_firm = FUTUINC" >> userconfig.ini

    - name: Run tests
      run: pytest

    - name: Set VERSION env variable
      run: echo "VERSION=$(python -c "from version import VERSION; print(VERSION)")" >> $env:GITHUB_ENV
      shell: pwsh

    - name: Build executable
      run: python scripts/build_exe.py
      env:
        APP_NAME: ${{ env.APP_NAME }}

    - name: Get system locale
      run: |
        $locale = (Get-Culture).Name
        Write-Host "##locale=$locale"
    
    - name: Compare versions
      id: compare_versions
      run: |
        $latest_tag = (git describe --tags $(git rev-list --tags --max-count=1) 2>$null) -replace '^v', ''
        if (-not $latest_tag) {
          Write-Output "should_release=true" >> $env:GITHUB_ENV
          exit 0
        }
        $current_version = $env:VERSION
        if ([version]$current_version -ne [version]$latest_tag) {
          Write-Output "should_release=true" >> $env:GITHUB_ENV
        } else {
          Write-Output "should_release=false" >> $env:GITHUB_ENV
        }
      shell: pwsh
  
    - name: Update README files
      run: python scripts/update_readme.py
    
    - name: Commit README changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md README.zh-CN.md
        git commit -m "Update version in README files" || echo "No changes to commit"
        git push

    - name: Create Tag and Release
      id: create_release
      if: ${{ env.should_release == 'true' }}
      uses: actions/github-script@v6
      env:
        VERSION: ${{ env.VERSION }}
        should_release: ${{ env.should_release }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const version = process.env.VERSION;
          
          await github.rest.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: `refs/tags/v${version}`,
            sha: context.sha
          });
          
          const release = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: `v${version}`,
            name: `Grid Trading Plan Calculator v${version}`,
            body: `## 新特性\n${context.payload.head_commit.message}\n\n## 安装说明\n1. 下载附件中的 .exe 文件\n2. 双击运行即可使用，无需安装\n\n如有任何问题或建议，欢迎提交 issue。`,
            draft: false,
            prerelease: false
          });
          
          return release.data.upload_url;

    - name: Upload Release Asset
      uses: actions/github-script@v6
      env:
        VERSION: ${{ env.VERSION }}
        APP_NAME: ${{ env.APP_NAME }}
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const fs = require('fs').promises;
          const { repo: { owner, repo }, sha } = context;
          const version = process.env.VERSION;
          const appName = process.env.APP_NAME;
          
          const release = await github.rest.repos.getReleaseByTag({
            owner,
            repo,
            tag: `v${version}`
          }).catch(err => {
            if (err.status === 404) {
              console.log('Release not found, skipping asset upload.');
              return null;
            }
            throw err;
          });

          if (release) {
            console.log('Uploading release asset...');
            const assetPath = `./dist/${appName}-${version}.exe`;
            console.log(`Looking for asset at: ${assetPath}`);
            
            try {
              const asset = await fs.readFile(assetPath);
              
              await github.rest.repos.uploadReleaseAsset({
                owner,
                repo,
                release_id: release.data.id,
                name: `${appName}-${version}.exe`,
                data: asset
              });
              console.log('Asset uploaded successfully.');
            } catch (error) {
              console.error('Error reading or uploading asset:', error);
              core.setFailed('Failed to upload release asset');
            }
          }

    - name: List dist directory
      if: failure()
      run: ls -R dist